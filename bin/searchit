#!/usr/bin/env ruby

require "bundler/setup"
require "searchonastick"
require "searchonastick/textfiles"
require "searchonastick/searcher"
require "rubygems"
require 'getoptlong'

opts = GetoptLong.new(
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--search-term', '-s', GetoptLong::REQUIRED_ARGUMENT],
  ['--method', '-m', GetoptLong::REQUIRED_ARGUMENT],
  ['--keep-index', '-k', GetoptLong::NO_ARGUMENT],
  ['--reuse-index', '-r', GetoptLong::NO_ARGUMENT]
)

search_term = ''
search_method = ''
reuse_index = false
keep_index = false


help_txt = <<-EOF
bin/searchit [OPTIONS]

-h,--help:
    show help

-k,--keep-index:
    meant for use with Indexed search. keeps index files on disk.

-m, --method [1|2|3]: 
    enter 1, 2, or 3 
    where 
    - 1 is for String Search
    - 2 is for Regex Search
    - 3 is for Indexed Search

-r,--reuse-index:
    meant for use with Indexed search. skips indexing and reuses existing index files.

-s, --search-term <argument>: 
    The string you want searched in the documents
EOF

unless (ARGV.size > 0)
  puts help_txt
  exit 0
end

opts.each do |opt, arg|
  case opt
    when '--help'
      puts help_txt
    when '--search-term'
      search_term = arg
    when '--method'
      # matching numbers in the interface to numbers in the program
      search_method = (arg.to_i - 1)
    when '--reuse-index'
      reuse_index = true
    when '--keep-index'
      keep_index = true
  end
end

textfiles = Searchonastick::Textfiles.new
searcher = Searchonastick::Searcher.new(search_method, textfiles, search_term, keep_index, reuse_index)

search_results = searcher.search

full_results_count = 0
results_map = {}
search_results.each{|result|
  full_results_count += result.count
  results_map[result.name] = result.count
}

# sort the hash by count values, descending
sorted_results = results_map.sort_by{|k,v| -v}.to_h

puts "\nSearch Results:\n\n"
sorted_results.each_pair{|k,v|
  puts "\t#{k} - #{v} matches\n\n"

}

indexing_time = searcher.index_benchmark
searching_time = searcher.search_benchmark

puts "Timing:\n\n"
if (search_method == 2)
  puts "\tTime to index - #{indexing_time.total * 1000}ms"
end

puts "\tTime to search - #{searching_time.total * 1000}ms"





